name: Build and Test (.NET on Windows with Playwright)

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Debug action folder
      run: ls -la ./.github/actions/ollama

    - name: Pull Models
      uses: ./github/actions/ollama

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '10.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build only supported projects
      run: |
        dotnet build MMDataAccess/MMDataAccess.csproj --no-restore
        dotnet build MMUserInterface/MMUserInterface.csproj --no-restore
        dotnet build TestsUnit/TestsUnit.csproj --no-restore
        dotnet build TestsPlaywright/TestsPlaywright.csproj --no-restore

    - name: Run unit tests
      run: dotnet test TestsUnit.csproj
        --no-build
        --configuration Debug
      working-directory: TestsUnit

    - name: Install Playwright CLI (no manifest)
      run: dotnet tool install Microsoft.Playwright.CLI --tool-path tools
    
    - name: Install Playwright browsers (Chromium only)
      run: tools/playwright install --with-deps chromium

    - name: Generate and trust HTTPS development certificate
      run: |
        dotnet dev-certs https --clean
        dotnet dev-certs https
      shell: pwsh

    - name: Docker login
      shell: pwsh
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        $env:DOCKER_PASSWORD | docker login --username $env:DOCKER_USERNAME --password-stdin

    - name: Start Dockerized SQL Server
      shell: bash
      env:
        SA_PASSWORD: ${{ secrets.DB_PASSWORD }}
      run: |
        set -e  # fail on any error

        docker pull jaburrow/manufacturermanager:seeded

        docker run -d --name seeded-db \
          -e "ACCEPT_EULA=Y" \
          -e "SA_PASSWORD=$SA_PASSWORD" \
          -p 11433:1433 \
          jaburrow/manufacturermanager:seeded

    - name: Wait for SQL Server to become available
      shell: bash
      env:
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      run: |
        set -e
        max_attempts=10
        attempt=1
        until docker run --rm --network host mcr.microsoft.com/mssql-tools \
          /bin/bash -c "/opt/mssql-tools/bin/sqlcmd -S localhost,11433 -U sa -P \"$DB_PASSWORD\" -Q \"SELECT 1\"" > /dev/null 2>&1
        do
          if [ $attempt -ge $max_attempts ]; then
            echo "SQL Server not available after $max_attempts attempts."
            exit 1
          fi
          echo "Attempt $attempt: SQL Server not ready, waiting..."
          sleep 5
          attempt=$((attempt+1))
        done
        echo "SQL Server is available!"
    
    - name: Start MMUserInterface in background
      shell: bash
      run: |
        dotnet run --no-build --urls https://127.0.0.1:5245 &
        sleep 20
      working-directory: MMUserInterface

    - name: Check if MMUserInterface is up
      shell: bash
      run: |
        for i in {1..30}; do
          if curl -k --silent --fail https://127.0.0.1:5245/ > /dev/null; then
            echo "MMUserInterface is up!"
            exit 0
          fi
          echo "Waiting for MMUserInterface..."
          sleep 2
        done
        echo "MMUserInterface did not become ready in time."
        exit 1


    - name: Run Playwright tests over HTTPS
      shell: pwsh
      run: dotnet test TestsPlaywright.csproj -- "UseHttps=true"
      working-directory: TestsPlaywright